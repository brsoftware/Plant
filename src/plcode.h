#ifndef PLCODE_H
#define PLCODE_H

typedef enum PlCode
{
    PL_CONSTANT,
    PL_CONSTANT_LONG,
    PL_NULL,
    PL_TRUE,
    PL_FALSE,
    PL_POP,
    PL_DUPLICATE,
    PL_DUPLICATE_PREV,
    PL_SWAP,
    PL_GET_LOCAL,
    PL_SET_LOCAL,
    PL_GET_GLOBAL,
    PL_DEFINE_GLOBAL,
    PL_SET_GLOBAL,
    PL_GET_SURVALUE,
    PL_SET_SURVALUE,
    PL_GET_PROPERTY,
    PL_SET_PROPERTY,
    PL_GET_SUPER,
    PL_GET_INDEX,
    PL_SET_INDEX,
    PL_GET_LOCAL_LONG,
    PL_SET_LOCAL_LONG,
    PL_GET_GLOBAL_LONG,
    PL_DEFINE_GLOBAL_LONG,
    PL_SET_GLOBAL_LONG,
    PL_GET_SURVALUE_LONG,
    PL_SET_SURVALUE_LONG,
    PL_GET_PROPERTY_LONG,
    PL_SET_PROPERTY_LONG,
    PL_GET_SUPER_LONG,
    PL_EQUAL,
    PL_GREATER,
    PL_LESS,
    PL_ADD,
    PL_SUBTRACT,
    PL_MULTIPLY,
    PL_DIVIDE,
    PL_MODULO,
    PL_NOT,
    PL_NEGATE,
    PL_AFFIRM,
    PL_BITNOT,
    PL_BITAND,
    PL_BITXOR,
    PL_BITOR,
    PL_LSHIFT,
    PL_RSHIFT,
    PL_ADD_1,
    PL_DEC_1,
    PL_PRINT,
    PL_PRINT_EMPTY,
    PL_JUMP,
    PL_JUMP_IF_FALSE,
    PL_LOOP,
    PL_CALL,
    PL_INVOKE,
    PL_SUPER_INVOKE,
    PL_CLOSURE,
    PL_CLOSE_SURVALUE,
    PL_RETURN,
    PL_CLASS,
    PL_INHERIT,
    PL_METHOD,
    PL_INVOKE_LONG,
    PL_SUPER_INVOKE_LONG,
    PL_CLOSURE_LONG,
    PL_CLASS_LONG,
    PL_METHOD_LONG,
    PL_VECTOR,
    PL_VECTOR_LONG,
    PL_MAP,
    PL_MAP_LONG,
    PL_SIZEOF,
    PL_STD,
    PL_STD_LONG,
    PL_INVALID = 255
} PlCode;

const char *pl_codeToStr(PlCode code);

#endif // PLCODE_H
