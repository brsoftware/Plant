#ifndef PLTOKENTYPE_H
#define PLTOKENTYPE_H

typedef enum PlTokenType
{
    PL_TT_LEFT_PAREN,
    PL_TT_RIGHT_PAREN,
    PL_TT_LEFT_BRACKET,
    PL_TT_RIGHT_BRACKET,
    PL_TT_LEFT_BRACE,
    PL_TT_RIGHT_BRACE,
    PL_TT_COMMA,
    PL_TT_DOT,
    PL_TT_MINUS,
    PL_TT_MINUS_MINUS,
    PL_TT_MINUS_EQUAL,
    PL_TT_PLUS,
    PL_TT_PLUS_PLUS,
    PL_TT_PLUS_EQUAL,
    PL_TT_COLON,
    PL_TT_COLON_COLON,
    PL_TT_SEMICOLON,
    PL_TT_SLASH,
    PL_TT_SLASH_EQUAL,
    PL_TT_STAR,
    PL_TT_STAR_EQUAL,
    PL_TT_PERCENTAGE,
    PL_TT_PERCENTAGE_EQUAL,
    PL_TT_BANG,
    PL_TT_BANG_EQUAL,
    PL_TT_EQUAL,
    PL_TT_EQUAL_EQUAL,
    PL_TT_GREATER,
    PL_TT_GREATER_EQUAL,
    PL_TT_GREATER_GREATER,
    PL_TT_GREATER_GREATER_EQUAL,
    PL_TT_LESS,
    PL_TT_LESS_EQUAL,
    PL_TT_LESS_LESS,
    PL_TT_LESS_LESS_EQUAL,
    PL_TT_TILDE,
    PL_TT_AMPERSAND,
    PL_TT_AMPERSAND_EQUAL,
    PL_TT_PIPE,
    PL_TT_PIPE_EQUAL,
    PL_TT_CARET,
    PL_TT_CARET_EQUAL,
    PL_TT_QUESTION,

    PL_TT_IDENTIFIER,
    PL_TT_STRING,
    PL_TT_NUMBER,

    PL_TT_AND,
    PL_TT_BREAK,
    PL_TT_CASE,
    // PL_TT_CATCH,
    PL_TT_CLASS,
    PL_TT_CONTINUE,
    PL_TT_DEFAULT,
    PL_TT_DO,
    PL_TT_ELSE,
    PL_TT_FALSE,
    // PL_TT_FINAL,
    // PL_TT_FINALLY,
    PL_TT_FOR,
    PL_TT_FUNC,
    PL_TT_IF,
    PL_TT_NOBREAK,
    // PL_TT_NOEXCEPT,
    PL_TT_NULL,
    PL_TT_OPERATOR,
    PL_TT_OR,
    PL_TT_PRINT,
    // PL_TT_PRIVATE,
    // PL_TT_PROTECTED,
    // PL_TT_PUBLIC,
    PL_TT_RETURN,
    PL_TT_SIZEOF,
    // PL_TT_STATIC,
    PL_TT_SUPER,
    PL_TT_SWITCH,
    PL_TT_THIS,
    // PL_TT_THROW,
    PL_TT_TRUE,
    // PL_TT_TRY,
    PL_TT_VAR,
    PL_TT_WHILE,

    PL_TT_ERROR,
    PL_TT_EOF
} PlTokenType;

#endif // PLTOKENTYPE_H
